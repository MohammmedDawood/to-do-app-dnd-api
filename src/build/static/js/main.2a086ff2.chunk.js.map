{"version":3,"sources":["redux/todoSlice.js","components/AddTodoForm.js","components/TaskDescriptionModal.js","components/TodoItem.js","components/TodoList.js","components/TotalCompleteItems.js","App.js","redux/store.js","reportWebVitals.js","index.js"],"names":["getTodosAsync","createAsyncThunk","a","fetch","response","status","json","todos","addTodoAsync","payload","method","headers","body","JSON","stringify","console","log","changeStatusTodoAsync","id","editTodoAsync","title","description","deleteTodoAsync","todoSlice","createSlice","name","initialState","reducers","addTodo","state","action","newTodo","push","changeStatus","index","findIndex","todo","editTodo","deleteTodo","filter","extraReducers","fulfilled","actions","AddTodoForm","dispatch","useDispatch","useState","setTitle","setDescription","onSubmit","event","preventDefault","className","type","placeholder","value","onChange","target","TaskDescriptionModal","props","showTodoInfo","show","setShow","handleClose","handleShowToDoInfo","Modal","onHide","Header","closeButton","Title","Body","Footer","Button","variant","onClick","TodoItem","setShowTodoInfo","draggableId","provided","snapshot","isDragging","draggableProps","dragHandleProps","ref","innerRef","icon","faInfoCircle","faTrash","TodoList","useSelector","useEffect","tasks","columns","todoColumn","taskIds","task","inProgressColumn","doneColumn","columnOrder","initialData","setInitialData","onDragEnd","result","destination","source","droppableId","start","finish","newTaskIds","Array","from","splice","find","newColumn","newInitialData","startTaskIds","newStart","finishTaskIds","newFinish","map","columnId","droppableProps","style","isDraggingOver","backgroundColor","TotalCompleteItems","tasksDone","item","length","App","showForm","setShowForm","configureStore","reducer","todoReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.2a086ff2.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nexport const getTodosAsync = createAsyncThunk(\r\n  \"todo/getTodosAsync\",\r\n  async () => {\r\n    const response = await fetch(\"http://localhost:7000/todos\");\r\n    if (response.status === 200) {\r\n      const todos = await response.json();\r\n      return { todos };\r\n    }\r\n  }\r\n);\r\nexport const addTodoAsync = createAsyncThunk(\r\n  \"todo/addTodoAsync\",\r\n  async (payload) => {\r\n    const response = await fetch(\"http://localhost:7000/todos\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(payload),\r\n    });\r\n    if (response.status === 200) {\r\n      console.log(payload);\r\n      const todos = await response.json();\r\n      return { todos };\r\n    }\r\n  }\r\n);\r\nexport const changeStatusTodoAsync = createAsyncThunk(\r\n  \"todo/changeStatusTodoAsync\",\r\n  async (payload) => {\r\n    const response = await fetch(`http://localhost:7000/todos/${payload.id}`, {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ status: payload.status }),\r\n    });\r\n    if (response.status === 200) {\r\n      console.log(payload);\r\n      const todos = await response.json();\r\n      return { todos };\r\n    }\r\n  }\r\n);\r\nexport const editTodoAsync = createAsyncThunk(\r\n  \"todo/editTodoAsync\",\r\n  async (payload) => {\r\n    const response = await fetch(\r\n      `http://localhost:7000/todos/edit/${payload.id}`,\r\n      {\r\n        method: \"PATCH\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          title: payload.title,\r\n          description: payload.description,\r\n          status: payload.status,\r\n        }),\r\n      }\r\n    );\r\n    if (response.status === 200) {\r\n      console.log(payload);\r\n      const todos = await response.json();\r\n      console.log(response);\r\n      console.log(todos);\r\n      return { todos };\r\n    }\r\n  }\r\n);\r\nexport const deleteTodoAsync = createAsyncThunk(\r\n  \"todo/deleteTodoAsync\",\r\n  async (payload) => {\r\n    const response = await fetch(`http://localhost:7000/todos/${payload.id}`, {\r\n      method: \"DELETE\",\r\n    });\r\n    if (response.status === 200) {\r\n      console.log(payload);\r\n      return { id: payload.id };\r\n    }\r\n  }\r\n);\r\n\r\nconst todoSlice = createSlice({\r\n  name: \"todos\",\r\n  initialState: [],\r\n  //define actions(reducer)\r\n  reducers: {\r\n    //Add new to to do where the action type and payload comes from the component\r\n    //and the state is the current state\r\n    addTodo: (state, action) => {\r\n      const newTodo = {\r\n        id: action.payload.id,\r\n        title: action.payload.title,\r\n        description: action.payload.description,\r\n        status: action.payload.status,\r\n      };\r\n      //   console.log(newTodo);\r\n      state.push(newTodo);\r\n      //   console.log(state);\r\n    },\r\n    changeStatus: (state, action) => {\r\n      const index = state.findIndex((todo) => todo.id === action.payload.id);\r\n      state[index].status = action.payload.status;\r\n    },\r\n    editTodo: (state, action) => {\r\n      const index = state.findIndex((todo) => todo.id === action.payload.id);\r\n      state[index].title = action.payload.title;\r\n      state[index].description = action.payload.description;\r\n    },\r\n    deleteTodo: (state, action) => {\r\n      // deleteTodo is the action\r\n      return state.filter((todo) => todo.id !== action.payload.id);\r\n    },\r\n  },\r\n  // specify additional reducers for thunk apis\r\n  extraReducers: {\r\n    [getTodosAsync.fulfilled]: (state, action) => {\r\n      console.log(\"data Fetched successfully!\");\r\n      return action.payload.todos;\r\n    },\r\n    [addTodoAsync.fulfilled]: (state, action) => {\r\n      console.log(\"data Added successfully!\");\r\n      state.push(action.payload.todos);\r\n    },\r\n    [changeStatusTodoAsync.fulfilled]: (state, action) => {\r\n      console.log(\"data Status Changed successfully successfully!\");\r\n      const index = state.findIndex((todo) => {\r\n        // console.log(action.payload.todos.id);\r\n        // console.log(todo.id);\r\n        return todo.id === action.payload.todos.id;\r\n      });\r\n      // console.log(index);\r\n      state[index].status = action.payload.todos.status;\r\n    },\r\n    [editTodoAsync.fulfilled]: (state, action) => {\r\n      console.log(\"data Edited successfully successfully!\");\r\n      // console.log(state);\r\n      const index = state.findIndex((todo) => {\r\n        // console.log(action.payload.todos.id);\r\n        // console.log(todo.id);\r\n        return todo.id === action.payload.todos.id;\r\n      });\r\n      console.log(index);\r\n      console.log(action.payload.todos);\r\n      state[index].title = action.payload.todos.title;\r\n      state[index].description = action.payload.todos.description;\r\n    },\r\n    [deleteTodoAsync.fulfilled]: (state, action) => {\r\n      console.log(\"data Deleted successfully successfully!\");\r\n      // console.log(todo.id);\r\n      // console.log(action.payload.id);\r\n      console.log((todo) => todo.id !== action.payload.id);\r\n      return state.filter((todo) => todo.id !== action.payload.id);\r\n    },\r\n  },\r\n});\r\n\r\n//export addTodo action\r\nexport const { addTodo, deleteTodo, changeStatus } = todoSlice.actions;\r\n\r\n//export reducer\r\nexport default todoSlice.reducer;\r\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addTodoAsync } from \"../redux/todoSlice\";\n\nconst AddTodoForm = () => {\n  const dispatch = useDispatch();\n\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  // const [status, setStatus] = useState(\"To Do\");\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    console.log(\"title: \" + title);\n    console.log(\"description: \" + description);\n    console.log(\"status: To Do\");\n\n    // dispatch event to redux\n    dispatch(\n      addTodoAsync({\n        title,\n        description,\n        status: \"To Do\",\n      })\n    );\n\n    // reset form\n    setTitle(\"\");\n    setDescription(\"\");\n  };\n\n  return (\n    <form\n      onSubmit={onSubmit}\n      className=\" align-items-center mx-auto mt-3 mb-3  col-6\"\n    >\n      {/* to do title */}\n      <div className=\"row\">\n        <div className=\"input-group mb-2 mr-sm-2 col-3\">\n          <span className=\"input-group-text\">Title</span>\n          <input\n            type=\"text\"\n            className=\"form-control \"\n            placeholder=\"Add title...\"\n            value={title}\n            onChange={(event) => setTitle(event.target.value)}\n          ></input>\n        </div>\n      </div>\n\n      {/* to do description */}\n      <div className=\"row\">\n        <div className=\"input-group mb-2 mr-sm-2 col-3\">\n          <span className=\"input-group-text mb-2 mr-sm-2\">Description</span>\n          <textarea\n            className=\"form-control mb-2 mr-sm-2\"\n            placeholder=\"Add description...\"\n            value={description}\n            onChange={(event) => setDescription(event.target.value)}\n          ></textarea>\n        </div>\n      </div>\n\n      {/* to do Status */}\n      {/* <div className=\"col-lg-3 col-md-12\">\n        <div className=\"input-group mb-2 mr-sm-2 col-3\">\n          <span className=\"input-group-text mb-2 mr-sm-2\">Status</span>\n          <select\n            className=\"form-select mb-2 mr-sm-2\"\n            defaultValue={status}\n            onChange={(event) => setStatus(event.target.value)}\n          >\n            <option>Choose Status...</option>\n            <option>To Do</option>\n            <option>In Progress</option>\n            <option>Done</option>\n          </select>\n        </div>\n      </div> */}\n\n      {/* to do Submit Button */}\n\n      <div className=\"row\">\n        <button type=\"submit\" className=\"btn btn-primary mb-2 col-12\">\n          Add Todo\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default AddTodoForm;\n","import React, { useState } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { editTodoAsync } from \"../redux/todoSlice\";\r\n\r\nfunction TaskDescriptionModal(props) {\r\n  const dispatch = useDispatch();\r\n  const [show, setShow] = useState(props.showTodoInfo);\r\n\r\n  const [title, setTitle] = useState(props.todo.title);\r\n  const [description, setDescription] = useState(props.todo.description);\r\n  // const [status, setStatus] = useState(props.todo.status);\r\n\r\n  const handlesaveChanges = () => {\r\n    console.log(\"id: \" + props.todo.id);\r\n    console.log(\"title: \" + title);\r\n    console.log(\"description: \" + description);\r\n    // console.log(\"status: \" + status);\r\n\r\n    // dispatch event to redux\r\n    dispatch(\r\n      editTodoAsync({\r\n        id: props.todo.id,\r\n        title,\r\n        description,\r\n        // status,\r\n      })\r\n    );\r\n\r\n    // close form\r\n    handleClose();\r\n  };\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    props.handleShowToDoInfo();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Task Details</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {/* to do title */}\r\n          <div className=\"col-lg-12 col-md-12\">\r\n            <div className=\"input-group mb-2 mr-sm-2 col-3\">\r\n              <span className=\"input-group-text\">Title</span>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control \"\r\n                placeholder=\"Add title...\"\r\n                value={title}\r\n                onChange={(event) => setTitle(event.target.value)}\r\n              ></input>\r\n            </div>\r\n          </div>\r\n\r\n          {/* to do description */}\r\n          <div className=\"col-lg-12 col-md-12\">\r\n            <div className=\"input-group mb-2 mr-sm-2 col-3\">\r\n              <span className=\"input-group-text mb-2 mr-sm-2\">Description</span>\r\n              <textarea\r\n                className=\"form-control mb-2 mr-sm-2\"\r\n                placeholder=\"Add description...\"\r\n                value={description}\r\n                onChange={(event) => setDescription(event.target.value)}\r\n              ></textarea>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handlesaveChanges}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TaskDescriptionModal;\r\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Draggable } from \"react-beautiful-dnd\";\n\nimport { deleteTodoAsync } from \"../redux/todoSlice\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport TaskDescriptionModal from \"./TaskDescriptionModal\";\n\nconst TodoItem = (props) => {\n  const dispatch = useDispatch();\n  const [showTodoInfo, setShowTodoInfo] = useState(false);\n\n  const handleShowToDoInfo = () => {\n    setShowTodoInfo(!showTodoInfo);\n  };\n  const deleteTodobtn = () => {\n    console.log(\"delete\");\n    console.log(props.todo.id);\n    // dispatch event to redux\n    dispatch(\n      deleteTodoAsync({\n        id: props.todo.id,\n      })\n    );\n  };\n  // const ChangeStatusTodobtn = (statusvalue) => {\n  //   console.log(\"Change Status\");\n  //   console.log(props.todo.id);\n  //   // dispatch event to redux\n  //   dispatch(\n  //     changeStatusTodoAsync({\n  //       id: props.todo.id,\n  //       status: statusvalue,\n  //     })\n  //   );\n  // };\n\n  return (\n    <>\n      <Draggable draggableId={props.todo.id} index={props.index}>\n        {(provided, snapshot) => (\n          <li\n            className={\n              snapshot.isDragging\n                ? \"list-group-item bg-success\"\n                : \"list-group-item\"\n            }\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            ref={provided.innerRef}\n          >\n            {/* Todo Header */}\n            <div className=\"d-flex justify-content-between row  mx-auto  \">\n              <div className=\"d-flex align-items-center \">\n                <b>\n                  <h1>{props.todo.title}</h1>\n                </b>\n              </div>\n              <div className=\"d-flex align-items-end row\">\n                {/* <select\n                  className=\"form-select mr-sm-1\"\n                  defaultValue={props.todo.status}\n                  onChange={(event) => ChangeStatusTodobtn(event.target.value)}\n                >\n                  <option>To Do</option>\n                  <option>In Progress</option>\n                  <option>Done</option>\n                </select> */}\n                <button\n                  className={\n                    showTodoInfo ? \"btn btn-danger m-1\" : \"btn btn-success m-1\"\n                  }\n                  onClick={handleShowToDoInfo}\n                >\n                  <FontAwesomeIcon icon={faInfoCircle} />\n                </button>\n                <button\n                  id={props.todo.id}\n                  className=\"btn btn-danger m-1\"\n                  onClick={() => deleteTodobtn()}\n                >\n                  <FontAwesomeIcon icon={faTrash} />\n                </button>\n              </div>\n            </div>\n          </li>\n        )}\n      </Draggable>\n      {/* Todo Description */}\n      {showTodoInfo && (\n        <TaskDescriptionModal\n          todo={props.todo}\n          showTodoInfo={showTodoInfo}\n          handleShowToDoInfo={handleShowToDoInfo}\n        />\n      )}\n    </>\n  );\n};\n\nexport default TodoItem;\n","import React, { useState, useEffect } from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getTodosAsync, changeStatusTodoAsync } from \"../redux/todoSlice\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\n\nconst TodoList = () => {\n  // get data from redux\n  const dispatch = useDispatch();\n  const todos = useSelector((state) => state.todos);\n  useEffect(() => {\n    // console.log(\"TodoList useEffect\");\n    dispatch(getTodosAsync());\n  }, [dispatch]);\n\n  // DND  Bueatiful Intial data\n  const [initialData, setInitialData] = useState({\n    tasks: todos,\n    columns: {\n      todoColumn: {\n        id: \"todoColumn\",\n        title: \"To do\",\n        taskIds: todos.filter((task) => {\n          if (task.status === \"To Do\") {\n            return task.id;\n          }\n          return null;\n        }),\n      },\n      inProgressColumn: {\n        id: \"inProgressColumn\",\n        title: \"In Progress\",\n        taskIds: todos.filter((task) => {\n          if (task.status === \"In Progress\") {\n            return task.id;\n          }\n          return null;\n        }),\n      },\n      doneColumn: {\n        id: \"doneColumn\",\n        title: \"Done\",\n        taskIds: todos.filter((task) => {\n          if (task.status === \"Done\") {\n            return task.id;\n          }\n          return null;\n        }),\n      },\n    },\n    // Facilitate reordering of the columns\n    columnOrder: [\"todoColumn\", \"inProgressColumn\", \"doneColumn\"],\n  });\n  useEffect(() => {\n    setInitialData({\n      tasks: todos,\n      columns: {\n        todoColumn: {\n          id: \"todoColumn\",\n          title: \"To Do\",\n          taskIds: todos.filter((task) => {\n            if (task.status === \"To Do\") {\n              return task.id;\n            }\n            return null;\n          }),\n        },\n        inProgressColumn: {\n          id: \"inProgressColumn\",\n          title: \"In Progress\",\n          taskIds: todos.filter((task) => {\n            if (task.status === \"In Progress\") {\n              return task.id;\n            }\n            return null;\n          }),\n        },\n        doneColumn: {\n          id: \"doneColumn\",\n          title: \"Done\",\n          taskIds: todos.filter((task) => {\n            if (task.status === \"Done\") {\n              return task.id;\n            }\n            return null;\n          }),\n        },\n      },\n      // Facilitate reordering of the columns\n      columnOrder: [\"todoColumn\", \"inProgressColumn\", \"doneColumn\"],\n    });\n\n    // return () => {\n    //   cleanup\n    // }\n  }, [todos]);\n  console.log(initialData);\n\n  const onDragEnd = (result) => {\n    // TODO: reorder our column\n    const { destination, source, draggableId } = result;\n    if (!destination) {\n      return;\n    }\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    const start = initialData.columns[source.droppableId];\n    const finish = initialData.columns[destination.droppableId];\n\n    if (start === finish) {\n      // sort IDS\n      const newTaskIds = Array.from(start.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(\n        destination.index,\n        0,\n        initialData.tasks.find((task) => task.id === draggableId)\n      );\n\n      // sort tasks\n      // const newTasks = [];\n      // newTaskIds.forEach((taskId) => {\n      //   newTasks.push(initialData.tasks.find((task) => task.id === taskId));\n      // });\n      // console.log(newTasks);\n\n      // new columns\n      const newColumn = {\n        ...start,\n        taskIds: newTaskIds,\n      };\n      console.log(newColumn);\n\n      const newInitialData = {\n        ...initialData,\n        // tasks: newTasks,\n        columns: {\n          ...initialData.columns,\n          [newColumn.id]: newColumn,\n        },\n      };\n\n      console.log(newInitialData);\n      setInitialData(newInitialData);\n      return;\n    }\n\n    // handlin data between columns\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds,\n    };\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(\n      destination.index,\n      0,\n      initialData.tasks.find((task) => task.id === draggableId)\n    );\n    console.log(draggableId);\n    const newFinish = {\n      ...finish,\n      taskIds: finishTaskIds,\n    };\n    console.log(newFinish.title);\n    const newInitialData = {\n      ...initialData,\n      // tasks: newTasks,\n      columns: {\n        ...initialData.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish,\n      },\n    };\n    console.log(newInitialData);\n    setInitialData(newInitialData);\n    // Changes status of task in redux\n    // dispatch event to redux\n    dispatch(\n      changeStatusTodoAsync({\n        id: draggableId,\n        status: newFinish.title,\n      })\n    );\n    // we should bbut all changes to DB backend and state and server\n  };\n\n  return (\n    <>\n      {/* // todo list element */}\n      <div className=\"container\">\n        <div className=\"row justify-content-center\">\n          <DragDropContext onDragEnd={onDragEnd}>\n            {initialData.columnOrder.map((columnId) => (\n              <Droppable\n                droppableId={initialData.columns[columnId].id}\n                key={columnId}\n              >\n                {\n                  // Droppable props\n                  (provided, snapshot) => (\n                    <div className=\" border border-dark rounded  col-lg-3 col-md-3 col-sm-12 m-1\">\n                      <h1 key={columnId} className=\"m-1\">\n                        {initialData.columns[columnId].title}\n                      </h1>\n                      <hr />\n                      <ul\n                        className=\"list-group m-3\"\n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                        style={\n                          snapshot.isDraggingOver\n                            ? { backgroundColor: \"lightblue\" }\n                            : null\n                        }\n                      >\n                        {/* // todo item element */}\n                        {initialData.columns[columnId].taskIds.map(\n                          (todo, index) => (\n                            <TodoItem key={todo.id} todo={todo} index={index} />\n                          )\n                        )}\n                        {provided.placeholder}\n                      </ul>\n                    </div>\n                  )\n                }\n                {/* <ul className=\"list-group\">\n            {todos.map((todo) => (\n              <TodoItem key={todo.id} todo={todo} />\n            ))}\n          </ul> */}\n              </Droppable>\n            ))}\n          </DragDropContext>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default TodoList;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst TotalCompleteItems = () => {\n  const tasksDone = useSelector(\n    (state) => state.todos.filter((item) => item.status === \"Done\").length\n  );\n  return <h4 className=\"mt-3\">Total Completed Items: {tasksDone}</h4>;\n};\n\nexport default TotalCompleteItems;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport AddTodoForm from \"./components/AddTodoForm\";\nimport TodoList from \"./components/TodoList\";\nimport TotalCompleteItems from \"./components/TotalCompleteItems\";\n\nconst App = () => {\n  const [showForm, setShowForm] = useState(false);\n\n  return (\n    <div className=\"container bg-white mt-5 \">\n      <div className=\"d-flex justify-content-between\">\n        <span className=\"d-flex align-items-center  \">\n          <h1>My Todo List</h1>\n        </span>\n        <span className=\"d-flex align-items-center\">\n          <button\n            className={showForm ? \"btn btn-danger\" : \"btn btn-success\"}\n            onClick={() => setShowForm(!showForm)}\n          >\n            {showForm ? \"Close\" : \"Add a todo\"}\n          </button>\n        </span>\n      </div>\n      {showForm && <AddTodoForm />}\n      <TodoList />\n      <TotalCompleteItems />\n    </div>\n  );\n};\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport todoReducer from \"./todoSlice\";\r\n\r\n// manage all reducers\r\nexport default configureStore({\r\n  reducer: {\r\n    todos: todoReducer,\r\n  },\r\n});\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}